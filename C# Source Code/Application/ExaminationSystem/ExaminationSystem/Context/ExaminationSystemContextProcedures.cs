// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using ExaminationSystem.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace ExaminationSystem.Context
{
    public partial class ExaminationSystemContext
    {
        private IExaminationSystemContextProcedures _procedures;

        public virtual IExaminationSystemContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ExaminationSystemContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IExaminationSystemContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<CHOICEInsertResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<COURSEINSERTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<DEPTINSERTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ExamCorrectionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ExamGenerationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetChoicesByQuestionIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetDistinctExamIDsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEnrolledCoursesByStudentIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEnrolledStudentCoursesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetExamQuestionsByIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetExamQuestionsTextByIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetExamReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetExamReportWithModelAnswerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetInstructorCoursesAndStudentsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetStudentCoursesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetStudentGradesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetStudentsByDepartmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetTopicsByCourseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<INSINSERTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<QUESTIONInsertResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SelectALLAnswerResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SelectALLChoiceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SelectALLCourseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SelectALLDepartmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SelectALLExamResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SelectALLExamQuestionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SelectALLGradesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SelectALLInstructorResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SelectALLQuestionResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SelectALLStudentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SelectALLStudentExamResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SelectALLTeachResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SelectALLTopicResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<STUDINSERTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<TOPICInsertResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UPDATECHOICEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UPDATECOURSEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UPDATEDEPARTMENTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UPDATEGRADEResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UPDATEINSTRUCTORResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UPDATEQUESTIONResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UPDATESTUDENTResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UPDATETOPICResult>().HasNoKey().ToView(null);
        }
    }

    public partial class ExaminationSystemContextProcedures : IExaminationSystemContextProcedures
    {
        private readonly ExaminationSystemContext _context;

        public ExaminationSystemContextProcedures(ExaminationSystemContext context)
        {
            _context = context;
        }

        public virtual async Task<List<CHOICEInsertResult>> CHOICEInsertAsync(string COL2DATA, bool? COL3DATA, int? COL4DATA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "COL2DATA",
                    Size = 400,
                    Value = COL2DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL3DATA",
                    Value = COL3DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "COL4DATA",
                    Value = COL4DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CHOICEInsertResult>("EXEC @returnValue = [dbo].[CHOICEInsert] @COL2DATA, @COL3DATA, @COL4DATA", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<COURSEINSERTResult>> COURSEINSERTAsync(int? COL1DATA, string COL2DATA, int? COL3DATA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "COL1DATA",
                    Value = COL1DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "COL2DATA",
                    Size = 100,
                    Value = COL2DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL3DATA",
                    Value = COL3DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<COURSEINSERTResult>("EXEC @returnValue = [dbo].[COURSEINSERT] @COL1DATA, @COL2DATA, @COL3DATA", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<DEPTINSERTResult>> DEPTINSERTAsync(string COL2DATA, int? COL3DATA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "COL2DATA",
                    Size = 100,
                    Value = COL2DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL3DATA",
                    Value = COL3DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<DEPTINSERTResult>("EXEC @returnValue = [dbo].[DEPTINSERT] @COL2DATA, @COL3DATA", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ExamAnswersAsync(int? Exam_ID, int? Student_ID, int? QID1, int? Ans1, int? QID2, int? Ans2, int? QID3, int? Ans3, int? QID4, int? Ans4, int? QID5, int? Ans5, int? QID6, int? Ans6, int? QID7, int? Ans7, int? QID8, int? Ans8, int? QID9, int? Ans9, int? QID10, int? Ans10, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Exam_ID",
                    Value = Exam_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Student_ID",
                    Value = Student_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QID1",
                    Value = QID1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ans1",
                    Value = Ans1 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QID2",
                    Value = QID2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ans2",
                    Value = Ans2 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QID3",
                    Value = QID3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ans3",
                    Value = Ans3 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QID4",
                    Value = QID4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ans4",
                    Value = Ans4 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QID5",
                    Value = QID5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ans5",
                    Value = Ans5 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QID6",
                    Value = QID6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ans6",
                    Value = Ans6 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QID7",
                    Value = QID7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ans7",
                    Value = Ans7 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QID8",
                    Value = QID8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ans8",
                    Value = Ans8 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QID9",
                    Value = QID9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ans9",
                    Value = Ans9 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QID10",
                    Value = QID10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Ans10",
                    Value = Ans10 ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ExamAnswers] @Exam_ID, @Student_ID, @QID1, @Ans1, @QID2, @Ans2, @QID3, @Ans3, @QID4, @Ans4, @QID5, @Ans5, @QID6, @Ans6, @QID7, @Ans7, @QID8, @Ans8, @QID9, @Ans9, @QID10, @Ans10", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ExamCorrectionResult>> ExamCorrectionAsync(int? ExId, int? StId, int? CID, OutputParameter<int?> TotalScore, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterTotalScore = new SqlParameter
            {
                ParameterName = "TotalScore",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = TotalScore?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ExId",
                    Value = ExId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StId",
                    Value = StId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CID",
                    Value = CID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterTotalScore,
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ExamCorrectionResult>("EXEC @returnValue = [dbo].[ExamCorrection] @ExId, @StId, @CID, @TotalScore OUTPUT", sqlParameters, cancellationToken);

            TotalScore.SetValue(parameterTotalScore.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ExamGenerationResult>> ExamGenerationAsync(int? CID, int? numOfTF, int? numOfMCQ, string examComplexity, int? InstID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CID",
                    Value = CID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "numOfTF",
                    Value = numOfTF ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "numOfMCQ",
                    Value = numOfMCQ ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "examComplexity",
                    Size = 40,
                    Value = examComplexity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InstID",
                    Value = InstID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ExamGenerationResult>("EXEC @returnValue = [dbo].[ExamGeneration] @CID, @numOfTF, @numOfMCQ, @examComplexity, @InstID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetChoicesByQuestionIdResult>> GetChoicesByQuestionIdAsync(int? QuestionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "QuestionID",
                    Value = QuestionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetChoicesByQuestionIdResult>("EXEC @returnValue = [dbo].[GetChoicesByQuestionId] @QuestionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDistinctExamIDsResult>> GetDistinctExamIDsAsync(int? CourseID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CourseID",
                    Value = CourseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDistinctExamIDsResult>("EXEC @returnValue = [dbo].[GetDistinctExamIDs] @CourseID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEnrolledCoursesByStudentIDResult>> GetEnrolledCoursesByStudentIDAsync(int? StudentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StudentID",
                    Value = StudentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEnrolledCoursesByStudentIDResult>("EXEC @returnValue = [dbo].[GetEnrolledCoursesByStudentID] @StudentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEnrolledStudentCoursesResult>> GetEnrolledStudentCoursesAsync(int? StudentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StudentID",
                    Value = StudentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEnrolledStudentCoursesResult>("EXEC @returnValue = [dbo].[GetEnrolledStudentCourses] @StudentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetExamQuestionsAsync(int? Exam_ID, OutputParameter<int?> QID1, OutputParameter<int?> QID2, OutputParameter<int?> QID3, OutputParameter<int?> QID4, OutputParameter<int?> QID5, OutputParameter<int?> QID6, OutputParameter<int?> QID7, OutputParameter<int?> QID8, OutputParameter<int?> QID9, OutputParameter<int?> QID10, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterQID1 = new SqlParameter
            {
                ParameterName = "QID1",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = QID1?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterQID2 = new SqlParameter
            {
                ParameterName = "QID2",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = QID2?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterQID3 = new SqlParameter
            {
                ParameterName = "QID3",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = QID3?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterQID4 = new SqlParameter
            {
                ParameterName = "QID4",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = QID4?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterQID5 = new SqlParameter
            {
                ParameterName = "QID5",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = QID5?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterQID6 = new SqlParameter
            {
                ParameterName = "QID6",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = QID6?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterQID7 = new SqlParameter
            {
                ParameterName = "QID7",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = QID7?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterQID8 = new SqlParameter
            {
                ParameterName = "QID8",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = QID8?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterQID9 = new SqlParameter
            {
                ParameterName = "QID9",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = QID9?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterQID10 = new SqlParameter
            {
                ParameterName = "QID10",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = QID10?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Exam_ID",
                    Value = Exam_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterQID1,
                parameterQID2,
                parameterQID3,
                parameterQID4,
                parameterQID5,
                parameterQID6,
                parameterQID7,
                parameterQID8,
                parameterQID9,
                parameterQID10,
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetExamQuestions] @Exam_ID, @QID1 OUTPUT, @QID2 OUTPUT, @QID3 OUTPUT, @QID4 OUTPUT, @QID5 OUTPUT, @QID6 OUTPUT, @QID7 OUTPUT, @QID8 OUTPUT, @QID9 OUTPUT, @QID10 OUTPUT", sqlParameters, cancellationToken);

            QID1.SetValue(parameterQID1.Value);
            QID2.SetValue(parameterQID2.Value);
            QID3.SetValue(parameterQID3.Value);
            QID4.SetValue(parameterQID4.Value);
            QID5.SetValue(parameterQID5.Value);
            QID6.SetValue(parameterQID6.Value);
            QID7.SetValue(parameterQID7.Value);
            QID8.SetValue(parameterQID8.Value);
            QID9.SetValue(parameterQID9.Value);
            QID10.SetValue(parameterQID10.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetExamQuestionsByIdResult>> GetExamQuestionsByIdAsync(int? ExamID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ExamID",
                    Value = ExamID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetExamQuestionsByIdResult>("EXEC @returnValue = [dbo].[GetExamQuestionsById] @ExamID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetExamQuestionsTextByIdResult>> GetExamQuestionsTextByIdAsync(int? ExamID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ExamID",
                    Value = ExamID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetExamQuestionsTextByIdResult>("EXEC @returnValue = [dbo].[GetExamQuestionsTextById] @ExamID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetExamReportResult>> GetExamReportAsync(int? ExamID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ExamID",
                    Value = ExamID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetExamReportResult>("EXEC @returnValue = [dbo].[GetExamReport] @ExamID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetExamReportWithModelAnswerResult>> GetExamReportWithModelAnswerAsync(int? ExamNumber, int? StudentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ExamNumber",
                    Value = ExamNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StudentID",
                    Value = StudentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetExamReportWithModelAnswerResult>("EXEC @returnValue = [dbo].[GetExamReportWithModelAnswer] @ExamNumber, @StudentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetInstructorCoursesAndStudentsResult>> GetInstructorCoursesAndStudentsAsync(int? InstructorID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "InstructorID",
                    Value = InstructorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetInstructorCoursesAndStudentsResult>("EXEC @returnValue = [dbo].[GetInstructorCoursesAndStudents] @InstructorID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetStudentCoursesResult>> GetStudentCoursesAsync(int? StudentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StudentID",
                    Value = StudentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetStudentCoursesResult>("EXEC @returnValue = [dbo].[GetStudentCourses] @StudentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetStudentGradesResult>> GetStudentGradesAsync(int? StudentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StudentID",
                    Value = StudentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetStudentGradesResult>("EXEC @returnValue = [dbo].[GetStudentGrades] @StudentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetStudentsByDepartmentResult>> GetStudentsByDepartmentAsync(int? Department_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Department_ID",
                    Value = Department_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetStudentsByDepartmentResult>("EXEC @returnValue = [dbo].[GetStudentsByDepartment] @Department_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetTopicsByCourseResult>> GetTopicsByCourseAsync(int? Course_ID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Course_ID",
                    Value = Course_ID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetTopicsByCourseResult>("EXEC @returnValue = [dbo].[GetTopicsByCourse] @Course_ID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> INSERTCOURSEAsync(string COL2DATA, int? COL3DATA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "COL2DATA",
                    Size = 100,
                    Value = COL2DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL3DATA",
                    Value = COL3DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[INSERTCOURSE] @COL2DATA, @COL3DATA", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> InsertTOPICAsync(string COL2DATA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "COL2DATA",
                    Size = 200,
                    Value = COL2DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[InsertTOPIC] @COL2DATA", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<INSINSERTResult>> INSINSERTAsync(string COL2DATA, string COL3DATA, DateTime? COL4DATA, string COL5DATA, string COL6DATA, int? COL7DATA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "COL2DATA",
                    Size = 40,
                    Value = COL2DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL3DATA",
                    Size = 40,
                    Value = COL3DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL4DATA",
                    Value = COL4DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "COL5DATA",
                    Size = 22,
                    Value = COL5DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL6DATA",
                    Size = 60,
                    Value = COL6DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL7DATA",
                    Value = COL7DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<INSINSERTResult>("EXEC @returnValue = [dbo].[INSINSERT] @COL2DATA, @COL3DATA, @COL4DATA, @COL5DATA, @COL6DATA, @COL7DATA", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<QUESTIONInsertResult>> QUESTIONInsertAsync(string COL2DATA, string COL3DATA, string COL4DATA, int? COL5DATA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "COL2DATA",
                    Size = 1000,
                    Value = COL2DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL3DATA",
                    Size = 40,
                    Value = COL3DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL4DATA",
                    Size = 40,
                    Value = COL4DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL5DATA",
                    Value = COL5DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<QUESTIONInsertResult>("EXEC @returnValue = [dbo].[QUESTIONInsert] @COL2DATA, @COL3DATA, @COL4DATA, @COL5DATA", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectALLAnswerResult>> SelectALLAnswerAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectALLAnswerResult>("EXEC @returnValue = [dbo].[SelectALLAnswer]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectALLChoiceResult>> SelectALLChoiceAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectALLChoiceResult>("EXEC @returnValue = [dbo].[SelectALLChoice]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectALLCourseResult>> SelectALLCourseAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectALLCourseResult>("EXEC @returnValue = [dbo].[SelectALLCourse]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectALLDepartmentResult>> SelectALLDepartmentAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectALLDepartmentResult>("EXEC @returnValue = [dbo].[SelectALLDepartment]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectALLExamResult>> SelectALLExamAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectALLExamResult>("EXEC @returnValue = [dbo].[SelectALLExam]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectALLExamQuestionResult>> SelectALLExamQuestionAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectALLExamQuestionResult>("EXEC @returnValue = [dbo].[SelectALLExamQuestion]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectALLGradesResult>> SelectALLGradesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectALLGradesResult>("EXEC @returnValue = [dbo].[SelectALLGrades]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectALLInstructorResult>> SelectALLInstructorAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectALLInstructorResult>("EXEC @returnValue = [dbo].[SelectALLInstructor]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectALLQuestionResult>> SelectALLQuestionAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectALLQuestionResult>("EXEC @returnValue = [dbo].[SelectALLQuestion]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectALLStudentResult>> SelectALLStudentAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectALLStudentResult>("EXEC @returnValue = [dbo].[SelectALLStudent]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectALLStudentExamResult>> SelectALLStudentExamAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectALLStudentExamResult>("EXEC @returnValue = [dbo].[SelectALLStudentExam]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectALLTeachResult>> SelectALLTeachAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectALLTeachResult>("EXEC @returnValue = [dbo].[SelectALLTeach]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SelectALLTopicResult>> SelectALLTopicAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SelectALLTopicResult>("EXEC @returnValue = [dbo].[SelectALLTopic]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SelectAnswerAsync(int? ExamID, int? StudentID, int? QuestionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ExamID",
                    Value = ExamID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StudentID",
                    Value = StudentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QuestionID",
                    Value = QuestionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SelectAnswer] @ExamID, @StudentID, @QuestionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SelectChoiceAsync(int? ChoiceID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ChoiceID",
                    Value = ChoiceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SelectChoice] @ChoiceID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SelectCourseAsync(int? CourseID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CourseID",
                    Value = CourseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SelectCourse] @CourseID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SelectDepartmentAsync(int? DepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DepartmentID",
                    Value = DepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SelectDepartment] @DepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SelectExamAsync(int? ExamID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ExamID",
                    Value = ExamID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SelectExam] @ExamID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SelectExamQuestionAsync(int? ExamID, int? QuestionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ExamID",
                    Value = ExamID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QuestionID",
                    Value = QuestionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SelectExamQuestion] @ExamID, @QuestionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SelectGradesAsync(int? StudentID, int? CourseID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StudentID",
                    Value = StudentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CourseID",
                    Value = CourseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SelectGrades] @StudentID, @CourseID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SelectInstructorAsync(int? InstructorID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "InstructorID",
                    Value = InstructorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SelectInstructor] @InstructorID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SelectQuestionAsync(int? QuestionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "QuestionID",
                    Value = QuestionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SelectQuestion] @QuestionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SelectStudentAsync(int? StudentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StudentID",
                    Value = StudentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SelectStudent] @StudentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SelectStudentExamAsync(int? ExamID, int? StudentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ExamID",
                    Value = ExamID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StudentID",
                    Value = StudentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SelectStudentExam] @ExamID, @StudentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SelectTeachAsync(int? CourseID, int? InstructorID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CourseID",
                    Value = CourseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InstructorID",
                    Value = InstructorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SelectTeach] @CourseID, @InstructorID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> SelectTopicAsync(int? TopicID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TopicID",
                    Value = TopicID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[SelectTopic] @TopicID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<STUDINSERTResult>> STUDINSERTAsync(int? COL1DATA, string COL2DATA, string COL3DATA, string COL4DATA, string COL5DATA, string COL6DATA, int? COL7DATA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "COL1DATA",
                    Value = COL1DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "COL2DATA",
                    Size = 60,
                    Value = COL2DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL3DATA",
                    Size = 60,
                    Value = COL3DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL4DATA",
                    Size = 60,
                    Value = COL4DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL5DATA",
                    Size = 60,
                    Value = COL5DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL6DATA",
                    Size = 60,
                    Value = COL6DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL7DATA",
                    Value = COL7DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<STUDINSERTResult>("EXEC @returnValue = [dbo].[STUDINSERT] @COL1DATA, @COL2DATA, @COL3DATA, @COL4DATA, @COL5DATA, @COL6DATA, @COL7DATA", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TOPICInsertResult>> TOPICInsertAsync(int? COL1DATA, string COL2DATA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "COL1DATA",
                    Value = COL1DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "COL2DATA",
                    Size = 200,
                    Value = COL2DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TOPICInsertResult>("EXEC @returnValue = [dbo].[TOPICInsert] @COL1DATA, @COL2DATA", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UPDATECHOICEResult>> UPDATECHOICEAsync(int? ChoiceID, string ChoiceText, bool? IsCorrect, int? QuestionID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ChoiceID",
                    Value = ChoiceID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ChoiceText",
                    Size = 400,
                    Value = ChoiceText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsCorrect",
                    Value = IsCorrect ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "QuestionID",
                    Value = QuestionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UPDATECHOICEResult>("EXEC @returnValue = [dbo].[UPDATECHOICE] @ChoiceID, @ChoiceText, @IsCorrect, @QuestionID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UPDATECOURSEResult>> UPDATECOURSEAsync(int? CourseID, string CourseName, int? TopicID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CourseID",
                    Value = CourseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CourseName",
                    Size = 100,
                    Value = CourseName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "TopicID",
                    Value = TopicID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UPDATECOURSEResult>("EXEC @returnValue = [dbo].[UPDATECOURSE] @CourseID, @CourseName, @TopicID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UPDATEDEPARTMENTResult>> UPDATEDEPARTMENTAsync(int? COL1DATA, string COL2DATA, int? COL3DATA, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "COL1DATA",
                    Value = COL1DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "COL2DATA",
                    Size = 100,
                    Value = COL2DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "COL3DATA",
                    Value = COL3DATA ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UPDATEDEPARTMENTResult>("EXEC @returnValue = [dbo].[UPDATEDEPARTMENT] @COL1DATA, @COL2DATA, @COL3DATA", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UPDATEGRADEResult>> UPDATEGRADEAsync(int? StudentID, int? ExamID, int? Score, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StudentID",
                    Value = StudentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ExamID",
                    Value = ExamID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Score",
                    Value = Score ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UPDATEGRADEResult>("EXEC @returnValue = [dbo].[UPDATEGRADE] @StudentID, @ExamID, @Score", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UPDATEINSTRUCTORResult>> UPDATEINSTRUCTORAsync(int? InstructorID, string FirstName, string LastName, DateTime? HireDate, string PhoneNumber, string Email, int? DepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "InstructorID",
                    Value = InstructorID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = 40,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = 40,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HireDate",
                    Value = HireDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneNumber",
                    Size = 22,
                    Value = PhoneNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 60,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentID",
                    Value = DepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UPDATEINSTRUCTORResult>("EXEC @returnValue = [dbo].[UPDATEINSTRUCTOR] @InstructorID, @FirstName, @LastName, @HireDate, @PhoneNumber, @Email, @DepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UPDATEQUESTIONResult>> UPDATEQUESTIONAsync(int? QuestionID, string QuestionText, string QuestionType, string Complexity, int? CourseID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "QuestionID",
                    Value = QuestionID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "QuestionText",
                    Size = 1000,
                    Value = QuestionText ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "QuestionType",
                    Size = 40,
                    Value = QuestionType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Complexity",
                    Size = 40,
                    Value = Complexity ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CourseID",
                    Value = CourseID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UPDATEQUESTIONResult>("EXEC @returnValue = [dbo].[UPDATEQUESTION] @QuestionID, @QuestionText, @QuestionType, @Complexity, @CourseID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UPDATESTUDENTResult>> UPDATESTUDENTAsync(int? StudentId, string FirstName, string LastName, string Address, string Email, string PhoneNum, int? DepartmentID, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StudentId",
                    Value = StudentId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = 60,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = 60,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Address",
                    Size = 60,
                    Value = Address ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 60,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneNum",
                    Size = 60,
                    Value = PhoneNum ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DepartmentID",
                    Value = DepartmentID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UPDATESTUDENTResult>("EXEC @returnValue = [dbo].[UPDATESTUDENT] @StudentId, @FirstName, @LastName, @Address, @Email, @PhoneNum, @DepartmentID", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UPDATETOPICResult>> UPDATETOPICAsync(int? TopicID, string TopicTitle, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "TopicID",
                    Value = TopicID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TopicTitle",
                    Size = 200,
                    Value = TopicTitle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UPDATETOPICResult>("EXEC @returnValue = [dbo].[UPDATETOPIC] @TopicID, @TopicTitle", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
